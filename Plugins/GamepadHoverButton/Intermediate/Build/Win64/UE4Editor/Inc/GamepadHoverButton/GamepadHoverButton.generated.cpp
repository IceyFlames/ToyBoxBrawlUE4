// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/GamepadHoverButtonPCH.h"
#include "GamepadHoverButton.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1GamepadHoverButton() {}
	void UC_ButtonWidget::StaticRegisterNativesUC_ButtonWidget()
	{
		FNativeFunctionRegistrar::RegisterFunction(UC_ButtonWidget::StaticClass(), "IsPressed",(Native)&UC_ButtonWidget::execIsPressed);
		FNativeFunctionRegistrar::RegisterFunction(UC_ButtonWidget::StaticClass(), "SetBackgroundColor",(Native)&UC_ButtonWidget::execSetBackgroundColor);
		FNativeFunctionRegistrar::RegisterFunction(UC_ButtonWidget::StaticClass(), "SetColorAndOpacity",(Native)&UC_ButtonWidget::execSetColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UC_ButtonWidget::StaticClass(), "SetStyle",(Native)&UC_ButtonWidget::execSetStyle);
	}
	IMPLEMENT_CLASS(UC_ButtonWidget, 2183635683);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	UMG_API class UClass* Z_Construct_UClass_UContentWidget();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister();

	GAMEPADHOVERBUTTON_API class UFunction* Z_Construct_UFunction_UC_ButtonWidget_IsPressed();
	GAMEPADHOVERBUTTON_API class UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetBackgroundColor();
	GAMEPADHOVERBUTTON_API class UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetColorAndOpacity();
	GAMEPADHOVERBUTTON_API class UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetStyle();
	GAMEPADHOVERBUTTON_API class UClass* Z_Construct_UClass_UC_ButtonWidget_NoRegister();
	GAMEPADHOVERBUTTON_API class UClass* Z_Construct_UClass_UC_ButtonWidget();
	GAMEPADHOVERBUTTON_API class UPackage* Z_Construct_UPackage__Script_GamepadHoverButton();
	UFunction* Z_Construct_UFunction_UC_ButtonWidget_IsPressed()
	{
		struct C_ButtonWidget_eventIsPressed_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UC_ButtonWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(C_ButtonWidget_eventIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, C_ButtonWidget_eventIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, C_ButtonWidget_eventIsPressed_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, C_ButtonWidget_eventIsPressed_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the user is actively pressing the button.  Do not use this for detecting 'Clicks', use the OnClicked event instead.\n\n@return true if the user is actively pressing the button otherwise false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetBackgroundColor()
	{
		struct C_ButtonWidget_eventSetBackgroundColor_Parms
		{
			FLinearColor InBackgroundColor;
		};
		UObject* Outer=Z_Construct_UClass_UC_ButtonWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(C_ButtonWidget_eventSetBackgroundColor_Parms));
			UProperty* NewProp_InBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InBackgroundColor, C_ButtonWidget_eventSetBackgroundColor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button background"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetColorAndOpacity()
	{
		struct C_ButtonWidget_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UC_ButtonWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(C_ButtonWidget_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, C_ButtonWidget_eventSetColorAndOpacity_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button content"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UC_ButtonWidget_SetStyle()
	{
		struct C_ButtonWidget_eventSetStyle_Parms
		{
			FButtonStyle InStyle;
		};
		UObject* Outer=Z_Construct_UClass_UC_ButtonWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(C_ButtonWidget_eventSetStyle_Parms));
			UProperty* NewProp_InStyle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InStyle, C_ButtonWidget_eventSetStyle_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button background"));
			MetaData->SetValue(NewProp_InStyle, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UC_ButtonWidget_NoRegister()
	{
		return UC_ButtonWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UC_ButtonWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage__Script_GamepadHoverButton();
			OuterClass = UC_ButtonWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UC_ButtonWidget_IsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UC_ButtonWidget_SetBackgroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UC_ButtonWidget_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UC_ButtonWidget_SetStyle());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnUnhovered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnUnhovered"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnUnhovered, UC_ButtonWidget), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature());
				UProperty* NewProp_OnHovered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnHovered"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnHovered, UC_ButtonWidget), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonHoverEvent__DelegateSignature());
				UProperty* NewProp_OnReleased = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnReleased"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnReleased, UC_ButtonWidget), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature());
				UProperty* NewProp_OnPressed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnPressed, UC_ButtonWidget), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature());
				UProperty* NewProp_OnClicked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnClicked"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnClicked, UC_ButtonWidget), 0x0010000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFocusable, UC_ButtonWidget, bool);
				UProperty* NewProp_IsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFocusable"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFocusable, UC_ButtonWidget), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFocusable, UC_ButtonWidget), sizeof(bool), true);
				UProperty* NewProp_TouchMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TouchMethod, UC_ButtonWidget), 0x0010040000000015, Z_Construct_UEnum_SlateCore_EButtonTouchMethod());
				UProperty* NewProp_ClickMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClickMethod"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClickMethod, UC_ButtonWidget), 0x0010040000000015, Z_Construct_UEnum_SlateCore_EButtonClickMethod());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UC_ButtonWidget), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UC_ButtonWidget), 0x0010000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UC_ButtonWidget), 0x0010000000000005, Z_Construct_UScriptStruct_FButtonStyle());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UC_ButtonWidget), 0x0010000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UC_ButtonWidget_IsPressed(), "IsPressed"); // 2153159073
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UC_ButtonWidget_SetBackgroundColor(), "SetBackgroundColor"); // 1123723001
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UC_ButtonWidget_SetColorAndOpacity(), "SetColorAndOpacity"); // 315838055
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UC_ButtonWidget_SetStyle(), "SetStyle"); // 1276825764
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("C_ButtonWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnUnhovered, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnUnhovered, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnHovered, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnHovered, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ToolTip"), TEXT("Called when the button is released"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ToolTip"), TEXT("Called when the button is pressed"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ToolTip"), TEXT("Called when the button is clicked"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ToolTip"), TEXT("Sometimes a button should only be mouse-clickable and never keyboard focusable."));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ToolTip"), TEXT("The type of touch action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ToolTip"), TEXT("The type of mouse action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color multiplier for the button background"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color multiplier for the button content"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The button style used at runtime"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/C_ButtonWidget.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("The template style asset, used to seed the mutable instance of the style."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UC_ButtonWidget(Z_Construct_UClass_UC_ButtonWidget, &UC_ButtonWidget::StaticClass, TEXT("UC_ButtonWidget"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UC_ButtonWidget);
	UPackage* Z_Construct_UPackage__Script_GamepadHoverButton()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GamepadHoverButton")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xF4080538;
			Guid.B = 0xECEA9524;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
